# Lily's Program Writing Sets

A guide to crafting elegant, maintainable, and efficient code.

---

## Core Principles

1. **Clarity:** Code should be easy to read, understand, and follow. Aim for self-documenting code where possible.
2. **Correctness:** Code should function as intended, be free of errors, and handle edge cases gracefully.
3. **Maintainability:** Code should be easy to modify, extend, and debug over time.
4. **Simplicity:** Avoid over-engineering; strive for the simplest solution that meets the requirements.

---

## Specific Guidelines

### I. Data and Variables

1. **Limit Pointer Use:** Use pointers only when necessary, and ensure proper memory management to avoid leaks or undefined behavior.
2. **Declare Variables at the Smallest Scope Possible:** Minimize side effects and improve code clarity by limiting variable visibility to where itâ€™s needed.
3. **Use Immutable Data Where Possible:** Prefer `const` or immutable variables to prevent unintended modifications.
4. **Avoid Global Variables:** Global state can lead to unpredictable behavior and make debugging difficult.

---

### II. Functions

5. **Restrict Function Complexity:**
   - Aim for a **Cyclomatic Complexity** of 15 or less. This improves testability and maintainability.
   - Use tools like static analyzers to measure and enforce this metric.
6. **Favor a Manageable Number of Function Parameters:**
   - Limit the number of parameters to 3-4. If more are needed, consider grouping related inputs into a data structure or object.
   - Use default parameters or optional arguments where appropriate.
7. **Use Assertions Strategically:**
   - Place assertions to validate critical assumptions, especially in functions with complex logic.
   - Avoid overusing assertions; focus on areas where unexpected behavior could lead to serious issues.
8. **Single Responsibility Principle:** Each function should do one thing and do it well. Avoid combining multiple responsibilities in a single function.

---

### III. Control Flow

9. **Use Simple Control Flow Structures:**
   - Avoid complex structures like `goto` statements or deeply nested loops.
   - Prefer clear and straightforward constructs like `if`, `else`, `for`, and `while`.
10. **Avoid Deep Nesting:**
    - Use **guard clauses** or **early returns** to reduce nesting depth.
    - Extract deeply nested logic into separate functions for better readability.
11. **Use Switch Statements Judiciously:** Prefer `switch` over multiple `if-else` statements when dealing with multiple discrete values.

---

### IV. Code Organization

12. **Minimize Nesting:**
    - **Invert Conditions:** Use early returns or guard clauses to reduce nesting.
    - **Merge Related Conditions:** Combine `if` conditions that perform similar checks.
    - **Extract Logic:** Move nested logic into separate functions to improve clarity.
13. **Promote Reusability and Clarity:**
    - **Avoid Code Duplication:** Reuse code blocks or functions to reduce redundancy.
    - **Centralize Shared Logic:** Group common logic into utility functions or modules for consistency.
14. **Modularize Code:** Break down large files into smaller, cohesive modules or classes that handle specific responsibilities.

---

### V. Naming and Conventions

15. **Apply a Clear and Consistent Naming Convention:**
    - **Universality:** Use consistent naming across all code elements (variables, functions, classes, etc.).
    - **Language Awareness:** Follow established conventions for your language (e.g., `camelCase` for JavaScript, `snake_case` for Python).
    - **Clarity is Key:**
        - Avoid vague or ambiguous names (e.g., `data`, `temp`, `foo`).
        - Use descriptive names that convey purpose (e.g., `userProfile`, `calculateTotalPrice`).
16. **Avoid Abbreviations:** Unless widely accepted (e.g., `id`, `url`), avoid abbreviations that may confuse readers.
17. **Use Meaningful Names for Booleans:** Prefix boolean variables with `is`, `has`, or `can` for clarity (e.g., `isValid`, `hasPermission`).

---

### VI. Tools and Practices

18. **Use a Version Control System:** Always use tools like Git to track changes, collaborate, and maintain a history of your code.
19. **Write Meaningful Comments:**
    - Explain the **why** behind complex logic, not the **what** (the code should speak for itself).
    - Avoid redundant comments that simply restate the code.
20. **Automate Code Quality Checks:**
    - Use linters, formatters, and static analyzers to enforce coding standards and catch potential issues early.
    - Integrate these tools into your CI/CD pipeline for continuous quality assurance.
21. **Write Tests:**
    - Include unit tests, integration tests, and end-to-end tests to ensure code correctness.
    - Follow the **Test-Driven Development (TDD)** approach where applicable.

---

## Continual Improvement

22. **Regularly Review and Refactor Code:**
    - Periodically revisit your codebase to identify areas for improvement.
    - Refactor code to improve readability, performance, and maintainability.
23. **Encourage Peer Reviews:**
    - Foster a culture of code reviews to share knowledge, catch issues early, and maintain high code quality.
24. **Stay Updated:**
    - Keep up with best practices, new tools, and language features to continuously improve your coding skills.

---

## Additional Tips

- **Document Your Code:** Use tools like JSDoc, Sphinx, or Doxygen to generate documentation for your codebase.
- **Optimize for Readability Over Cleverness:** Write code that is easy for others (and your future self) to understand, even if it means sacrificing some "clever" optimizations.
- **Follow the Principle of Least Surprise:** Write code that behaves in a predictable and intuitive way.
